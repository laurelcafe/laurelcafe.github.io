<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-08-06T18:09:15.925Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Leafs</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>从零开始搭建Blog（三）</title>
    <link href="http://yoursite.com/2020/08/05/Build_a_Blog_3/"/>
    <id>http://yoursite.com/2020/08/05/Build_a_Blog_3/</id>
    <published>2020-08-05T15:08:20.000Z</published>
    <updated>2020-08-06T18:09:15.925Z</updated>
    
    <content type="html"><![CDATA[<p>上一篇文章已经把Live2D模型加载进网页里了，但我选的模型是没有语音的，所以总感觉缺少点什么，找了找，发现不少Blog都有加音乐播放器。比较了几种音乐播放器之后，发现APlayer这个播放器不错。</p><h2 id="使用相关"><a href="#使用相关" class="headerlink" title="使用相关"></a>使用相关</h2><ul><li>音乐播放器: <a href="https://github.com/MoePlayer/APlayer">APlayer</a></li></ul><h2 id="APlayer插件"><a href="#APlayer插件" class="headerlink" title="APlayer插件"></a>APlayer插件</h2><p><code>Hexo</code> 里可以用的APlayer插件有两种： <a href="https://github.com/MoePlayer/hexo-tag-aplayer">hexo-tag-aplayer</a> 和 <a href="https://github.com/MoePlayer/APlayer">APlayer</a> 。</p><p>第一种我翻看了不少说明和Blog，都没有说全局的使用方法，所以我弃用了这个 <a href="https://github.com/MoePlayer/hexo-tag-aplayer">hexo-tag-aplayer</a> 插件，不过如果有需要在个别网页添加音乐的，可以考虑这个插件。</p><p>第二种看说明就有点复杂了，毕竟我不懂前端，所以我并不是很清楚说明里的代码该添加到哪。翻看了写Blog，找到一篇讲到了 <a href="https://github.com/MoePlayer/APlayer">APlayer</a> 全局应用的。</p><blockquote><p><a href="https://hakurei.red/2019/11/25/%E4%B8%BAHexo%E5%8D%9A%E5%AE%A2%E6%B7%BB%E5%8A%A0%E5%85%A8%E5%B1%80APlayer%E6%92%AD%E6%94%BE%E5%99%A8/#APlayer">为Hexo博客添加全局APlayer播放器</a></p></blockquote><p>这篇文章里提供了简单方便的使用方法。</p><h3 id="添加APlayer代码"><a href="#添加APlayer代码" class="headerlink" title="添加APlayer代码"></a>添加APlayer代码</h3><p>打开 <code>Hexo目录</code> 文件夹下的 <code>themes</code> 文件夹，然后打开 <code>你的Hexo主题名</code> 文件夹下的 <code>layout</code> 文件夹，再打开其中的布局文件，比如我用的 <a href="https://github.com/fi3ework/hexo-theme-archer">Archer</a> 主题就是 <code>X:\Hexo目录\themes\archer\layout\layout.ejs</code> 。</p><p><img src="https://cdn.jsdelivr.net/gh/laurelcafe/laurelcafe.github.io/image/Build_a_Blog_3/37.png" alt="图 9">  </p><p>然后添加代码。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="comment">&lt;!-- 引用依赖 --&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> </span></span></span><br><span class="line"><span class="xml">  href=&quot;https://cdn.jsdelivr.net/npm/aplayer@1.10.1/dist/APlayer.min.css&quot;&gt;</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/aplayer@1.10.1/dist/APlayer.min.js&quot;</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/meting@1.2.0/dist/Meting.min.js&quot;</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- 我使用的APlayer本体 --&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;aplayer&quot;</span> </span></span></span><br><span class="line"><span class="xml">  data-id=&quot;2465890057&quot; </span></span><br><span class="line"><span class="xml">  data-server=&quot;netease&quot; </span></span><br><span class="line"><span class="xml">  data-type=&quot;playlist&quot; </span></span><br><span class="line"><span class="xml">  data-fixed=&quot;true&quot; </span></span><br><span class="line"><span class="xml">  data-autoplay=&quot;true&quot; </span></span><br><span class="line"><span class="xml">  data-order=&quot;random&quot; </span></span><br><span class="line"><span class="xml">  data-volume=&quot;0.55&quot; </span></span><br><span class="line"><span class="xml">  data-theme=&quot;#cc543a&quot; </span></span><br><span class="line"><span class="xml">  data-preload=&quot;auto&quot; &gt;</span></span><br><span class="line">  <span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="comment">&lt;!--如果将本体放在body里面导致页面加载出现问题，请尝试放到body体后面--&gt;</span></span></span><br></pre></td></tr></table></figure><p>这样就可以在网页中添加一个 <a href="https://github.com/MoePlayer/APlayer">APlayer</a> 音乐播放器了。</p><p>具体参数设置可以参考 <a href="https://aplayer.js.org/#/zh-Hans/?id=mse-%E6%94%AF%E6%8C%81&keyword=lrc">APlayer中文文档</a> 。</p><h3 id="出现的问题"><a href="#出现的问题" class="headerlink" title="出现的问题"></a>出现的问题</h3><p>APlayer设置完成后，我打开Blog，发现文章中的侧目录不能跳转了，再测试下，又发现是英文目录正常跳转，中文目录无法跳转。</p><p><img src="https://cdn.jsdelivr.net/gh/laurelcafe/laurelcafe.github.io/image/Build_a_Blog_3/86.png" alt="图 10">  </p><p>咋回事？</p><p>然后注释掉APlayer相关代码后，跳转又正常了，说明问题是出现再APlayer上，但翻了翻APlayer的 <a href="https://github.com/MoePlayer/APlayer/issues">Issues</a> 并没有发现简单易行的方法。</p><p>这时候只能请出万能的<del>百度</del>谷歌了。</p><p>然后我找到了这篇文章。</p><blockquote><p><a href="https://blog.wangriyu.wang/2018/06-Aplayer.html">使用 Aplayer 导致博客目录跳转失效</a></p></blockquote><p>这篇文章说是其中一个调用的插件 <code>smoothscroll</code> 。</p><blockquote><p>然后我发现它处理 hash 时只测试了英文，而使用中文时，中文字符转成了 Unicode 码，下面函数的判断条件无法成立，后面的点击处理也就失效了。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> linkHandler = <span class="function"><span class="keyword">function</span>(<span class="params">ev</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!ev.defaultPrevented) &#123;</span><br><span class="line">        ev.preventDefault();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (location.hash !== <span class="built_in">this</span>.hash) <span class="built_in">window</span>.history.pushState(<span class="literal">null</span>, <span class="literal">null</span>, <span class="built_in">this</span>.hash)</span><br><span class="line">        <span class="comment">// using the history api to solve issue #1 - back doesn&#x27;t work</span></span><br><span class="line">        <span class="comment">// most browser don&#x27;t update :target when the history api is used:</span></span><br><span class="line">        <span class="comment">// THIS IS A BUG FROM THE BROWSERS.</span></span><br><span class="line">        <span class="comment">// change the scrolling duration in this call</span></span><br><span class="line">        <span class="keyword">var</span> node = <span class="built_in">document</span>.getElementById(<span class="built_in">this</span>.hash.substring(<span class="number">1</span>))</span><br><span class="line">        <span class="keyword">if</span> (!node) <span class="keyword">return</span>; <span class="comment">// Do not scroll to non-existing node</span></span><br><span class="line"></span><br><span class="line">        smoothScroll(node, <span class="number">500</span>, <span class="function"><span class="keyword">function</span> (<span class="params">el</span>) </span>&#123;</span><br><span class="line">            location.replace(<span class="string">&#x27;#&#x27;</span> + el.id)</span><br><span class="line">            <span class="comment">// this will cause the :target to be activated.</span></span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>需要修改的地方是对 hash 的进行 decodeURIComponent 处理，这样就能正常处理中文的标签和 location 的对应问题了。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> linkHandler = <span class="function"><span class="keyword">function</span>(<span class="params">ev</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!ev.defaultPrevented) &#123;</span><br><span class="line">        ev.preventDefault();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">decodeURIComponent</span>(location.hash) !== <span class="built_in">decodeURIComponent</span>(<span class="built_in">this</span>.hash)) <span class="built_in">window</span>.history.pushState(<span class="literal">null</span>, <span class="literal">null</span>, <span class="built_in">decodeURIComponent</span>(<span class="built_in">this</span>.hash))</span><br><span class="line">        <span class="comment">// using the history api to solve issue #1 - back doesn&#x27;t work</span></span><br><span class="line">        <span class="comment">// most browser don&#x27;t update :target when the history api is used:</span></span><br><span class="line">        <span class="comment">// THIS IS A BUG FROM THE BROWSERS.</span></span><br><span class="line">        <span class="comment">// change the scrolling duration in this call</span></span><br><span class="line">        <span class="keyword">var</span> node = <span class="built_in">document</span>.getElementById(<span class="built_in">decodeURIComponent</span>(<span class="built_in">this</span>.hash).substring(<span class="number">1</span>))</span><br><span class="line">        <span class="keyword">if</span> (!node) <span class="keyword">return</span>; <span class="comment">// Do not scroll to non-existing node</span></span><br><span class="line"></span><br><span class="line">        smoothScroll(node, <span class="number">500</span>, <span class="function"><span class="keyword">function</span> (<span class="params">el</span>) </span>&#123;</span><br><span class="line">            location.replace(<span class="string">&#x27;#&#x27;</span> + el.id)</span><br><span class="line">            <span class="comment">// this will cause the :target to be activated.</span></span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看不懂没关系，文章作者打包了现成的 <a href="https://src.wangriyu.wang/lib/Aplayer/APlayer.min.js">APlayer.min.js</a> ，你可以直接应用这个文件。</p><p>当然，你也可以用现成的代码替换代上面的APlayer代码。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> </span></span></span><br><span class="line"><span class="xml">href=&quot;https://cdn.jsdelivr.net/npm/aplayer@1.10.1/dist/APlayer.min.css&quot;&gt;</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/gh/laurelcafe/item@1.0/APlayer.min.js&quot;</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/meting@1.2.0/dist/Meting.min.js&quot;</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>这样中文侧目录就不会跳转失败了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;上一篇文章已经把Live2D模型加载进网页里了，但我选的模型是没有语音的，所以总感觉缺少点什么，找了找，发现不少Blog都有加音乐播放器。比较了几种音乐播放器之后，发现APlayer这个播放器不错。&lt;/p&gt;
&lt;h2 id=&quot;使用相关&quot;&gt;&lt;a href=&quot;#使用相关&quot; cla
      
    
    </summary>
    
    
    
      <category term="Blog" scheme="http://yoursite.com/tags/Blog/"/>
    
      <category term="音乐" scheme="http://yoursite.com/tags/%E9%9F%B3%E4%B9%90/"/>
    
      <category term="APlayer" scheme="http://yoursite.com/tags/APlayer/"/>
    
  </entry>
  
  <entry>
    <title>从零开始搭建Blog（二）</title>
    <link href="http://yoursite.com/2020/08/05/Build_a_Blog_2/"/>
    <id>http://yoursite.com/2020/08/05/Build_a_Blog_2/</id>
    <published>2020-08-04T16:32:20.000Z</published>
    <updated>2020-08-06T18:09:14.134Z</updated>
    
    <content type="html"><![CDATA[<p>上一篇文章已经把Blog建立起来了，我觉得需要再额外加点别的东西。看了几个别人的Blog，觉得Live2D插件比较合适，所以记录下安装过程和遇到的问题。</p><h2 id="使用相关"><a href="#使用相关" class="headerlink" title="使用相关"></a>使用相关</h2><ul><li>Live2D插件：<a href="https://github.com/EYHN/hexo-helper-live2d">hexo-helper-live2d</a></li><li>Live2D：<a href="https://github.com/imuncle/live2d">live2d</a></li></ul><h2 id="Live2D插件"><a href="#Live2D插件" class="headerlink" title="Live2D插件"></a>Live2D插件</h2><p>具体教程也可以参考<a href="https://github.com/EYHN/hexo-helper-live2d/blob/master/README.zh-CN.md">hexo-helper-live2d中文教程</a>。</p><p>这个插件的作用就是在向的Hexo里放上一只萌萌哒二次元看板娘，有些模型还会带有语音，具体的模型可以去<a href="https://github.com/xiazeyu/live2d-widget-models">live2d-widget-models</a>或者<a href="https://github.com/imuncle/live2d">live2d</a>里寻找。</p><h3 id="安装Live2D插件"><a href="#安装Live2D插件" class="headerlink" title="安装Live2D插件"></a>安装Live2D插件</h3><p>我们打开 <code>Hexo目录</code> ，右键选择 <code>Git Bash Here</code> ，然后输入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save hexo-helper-live2d</span><br></pre></td></tr></table></figure><p>等待完成。然后打开 <code>Hexo目录</code> 下的 <code>_config.yml</code> 文件或主题文件夹下的 <code>_config.yml</code> 文件中添加配置</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">live2d:</span><br><span class="line">  enable: true</span><br><span class="line">  scriptFrom: local</span><br><span class="line">  pluginRootPath: live2dw/</span><br><span class="line">  pluginJsPath: lib/</span><br><span class="line">  pluginModelPath: assets/</span><br><span class="line">  tagMode: false</span><br><span class="line">  debug: false</span><br><span class="line">  model:</span><br><span class="line"><span class="code">    use: live2d-widget-model-wanko</span></span><br><span class="line"><span class="code">  display:</span></span><br><span class="line"><span class="code">    position: right</span></span><br><span class="line"><span class="code">    width: 150</span></span><br><span class="line"><span class="code">    height: 300</span></span><br><span class="line"><span class="code">  mobile:</span></span><br><span class="line"><span class="code">    show: true</span></span><br><span class="line"><span class="code">  react:</span></span><br><span class="line"><span class="code">    opacity: 0.7</span></span><br></pre></td></tr></table></figure><p>具体设置信息请参考<a href="https://l2dwidget.js.org/docs/class/src/index.js~L2Dwidget.html#instance-method-init">live2d-widget.js API</a>。</p><p>设置完成后，接下来就是重点了。</p><h3 id="Live2D模型"><a href="#Live2D模型" class="headerlink" title="Live2D模型"></a>Live2D模型</h3><p>Live2D模型呢，本身这个<a href="https://github.com/EYHN/hexo-helper-live2d">项目</a>是有一部分现有的模型，可以参照这个<a href="https://blog.csdn.net/wang_123_zy/article/details/87181892#live2dwidgetmodelchitose_12">网址</a>上展示的选择。</p><p>不过既然要搞了，那就要搞好的。这里我推荐<a href="https://github.com/imuncle/live2d">live2d</a>这个里面的Live2D模型。</p><p>打开这个<a href="https://github.com/imuncle/live2d">live2d</a>项目的页面，点击页面右侧的</p><p>这里面目前收集了128个模型，分为<a href="http://119.23.8.25/live2d">Live2d Cubism 2</a>和<a href="http://119.23.8.25/live2d/live2d_3">Live2d Cubism 3</a>两种，<a href="http://119.23.8.25/live2d/live2d_3">Live2d Cubism 3</a>里面的模型要比<a href="http://119.23.8.25/live2d">Live2d Cubism 2</a>里的模型精细很多。<del>碧蓝航线的乳摇，奶子谁不爱呢</del></p><p>选好模型后，点击页面右侧的 <code>code</code> ，选择 <code>Download ZIP</code> ，然后解压到任意位置。</p><p><img src="https://cdn.jsdelivr.net/gh/laurelcafe/laurelcafe.github.io/image/Build_a_Blog_2/35.png" alt="图 1"></p><p>然后在解压出来的文件夹 <code>live2d-master</code> 中的 <code>model</code> 文件夹中找到自己选好的模型，复制到 <code>Hexo目录</code> 下的 <code>live2d_models</code> 文件夹下（如果没有请自己新建）。</p><p><img src="https://cdn.jsdelivr.net/gh/laurelcafe/laurelcafe.github.io/image/Build_a_Blog_2/77.png" alt="图 2">  </p><p><img src="https://cdn.jsdelivr.net/gh/laurelcafe/laurelcafe.github.io/image/Build_a_Blog_2/54.png" alt="图 3">  </p><p>然后然后打开 <code>Hexo目录</code> 下的 <code>_config.yml</code> 文件或主题文件夹下的 <code>_config.yml</code> 文件，修改配置代码。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">live2d:</span><br><span class="line">  model:</span><br><span class="line"><span class="code">    use: 你的模型文件夹名（如：noireswim）</span></span><br></pre></td></tr></table></figure><h3 id="Live2D模型修改"><a href="#Live2D模型修改" class="headerlink" title="Live2D模型修改"></a>Live2D模型修改</h3><p>一般来说这样你 <code>hexo clean</code> <code>hexo g</code> <code>hexo s</code> 之后，就可以在 <code>http://localhost:4000/</code> 里看到你的Live2D模型了，但有些从<a href="https://github.com/imuncle/live2d">live2d</a>下载的模型，需要修改文件的部分内容才能正常的在网页上显示。</p><p>我在测试 <code>noireswim</code> 模型的时候就出现了，上面步骤按照说明设置，网页上却不显示模型的问题。</p><p>再仔细的看了一遍说明外加对照文件，发现 <code>noireswim</code> 文件夹下的文件名称不正确。</p><p><img src="https://cdn.jsdelivr.net/gh/laurelcafe/laurelcafe.github.io/image/Build_a_Blog_2/82.png" alt="图 4">  </p><p><img src="https://cdn.jsdelivr.net/gh/laurelcafe/laurelcafe.github.io/image/Build_a_Blog_2/5.png" alt="图 5">  </p><p>然后我修改了文件名，发现还是没有显示。所以我打开了文件，发现里面的代码也需要修改。</p><p><img src="https://cdn.jsdelivr.net/gh/laurelcafe/laurelcafe.github.io/image/Build_a_Blog_2/88.png" alt="图 6">  </p><p>但发现还缺少一部分文件，按照文件中提示的位置找到了缺少的文件。</p><p><img src="https://cdn.jsdelivr.net/gh/laurelcafe/laurelcafe.github.io/image/Build_a_Blog_2/91.png" alt="图 7">  </p><p>把缺少的文件复制过去，修改下路径，再测试，这次成功出现在页面上了。</p><p><img src="https://cdn.jsdelivr.net/gh/laurelcafe/laurelcafe.github.io/image/Build_a_Blog_2/70.png" alt="图 8">  </p><p>我还顺便添加了一言，调整了透明度和大小位置等，最后就是页面上这个效果了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;上一篇文章已经把Blog建立起来了，我觉得需要再额外加点别的东西。看了几个别人的Blog，觉得Live2D插件比较合适，所以记录下安装过程和遇到的问题。&lt;/p&gt;
&lt;h2 id=&quot;使用相关&quot;&gt;&lt;a href=&quot;#使用相关&quot; class=&quot;headerlink&quot; title=&quot;
      
    
    </summary>
    
    
    
      <category term="Blog" scheme="http://yoursite.com/tags/Blog/"/>
    
      <category term="Live2D" scheme="http://yoursite.com/tags/Live2D/"/>
    
      <category term="模型" scheme="http://yoursite.com/tags/%E6%A8%A1%E5%9E%8B/"/>
    
  </entry>
  
  <entry>
    <title>从零开始搭建Blog</title>
    <link href="http://yoursite.com/2020/08/04/Build_a_Blog/"/>
    <id>http://yoursite.com/2020/08/04/Build_a_Blog/</id>
    <published>2020-08-03T17:56:20.000Z</published>
    <updated>2020-08-06T18:09:32.309Z</updated>
    
    <content type="html"><![CDATA[<p>最近无事做，正好看了篇别人的Blog，感觉页面精美，所以也生出了自己搭建Blog的想法。<br>于是乎，心动不如行动。</p><h2 id="使用相关"><a href="#使用相关" class="headerlink" title="使用相关"></a>使用相关</h2><ul><li>使用的 <code>Hexo</code> 主题：<a href="https://github.com/fi3ework/hexo-theme-archer">Archer</a></li><li>使用的托管：<a href="https://github.com/">GitHub</a></li><li>安装程序：<a href="https://nodejs.org/en/">Node.js</a> 和 <a href="https://git-scm.com/">Git</a></li></ul><h2 id="在GitHub上作准备工作"><a href="#在GitHub上作准备工作" class="headerlink" title="在GitHub上作准备工作"></a>在GitHub上作准备工作</h2><p>首先我们要去<a href="https://github.com/">GitHub</a>上注册一个账号。</p><p><img src="https://cdn.jsdelivr.net/gh/laurelcafe/laurelcafe.github.io/image/Build_a_Blog/sign.png" alt="sign"></p><p>有账号的直接 <code>Sign in</code> 就好了。</p><p>然后左上角选择 <code>New Repository</code> 。</p><p><img src="https://cdn.jsdelivr.net/gh/laurelcafe/laurelcafe.github.io/image/Build_a_Blog/new.png" alt="new"></p><p>然后在 <code>Repository name</code> 位置输入 <code>你的用户名+.github.io</code> 。例如我的用户名是 <code>laurelcafe</code> ，所以就是 <code>laurelcafe.github.io</code> 。 <strong>如果不是按照这个方式命名的，后面的有些步骤可能会出现问题。</strong></p><p>下面的 <code>Description (optional)</code> 空着。</p><p>再下面的 <code>Initialize this repository with a README</code> 可以勾选也可以不勾选。</p><p>不过我已经创建过了，所以报错了。</p><p>然后点击 <code>Create repository</code> 。</p><p><img src="https://cdn.jsdelivr.net/gh/laurelcafe/laurelcafe.github.io/image/Build_a_Blog/create.png" alt="create"></p><p>创建完成后，我们点击页面右侧的 <code>Setting</code> ，然后拉到下面的 <code>GitHub Pages</code> 位置，点击 <code>Choose a Theme</code> 。</p><p><img src="https://cdn.jsdelivr.net/gh/laurelcafe/laurelcafe.github.io/image/Build_a_Blog/choose.png" alt="choose"></p><p>然后随便选择一个主题（<strong>Theme</strong>），这样我们在<a href="https://github.com/">GitHub</a>上的准备工作就完成了。</p><p><img src="https://cdn.jsdelivr.net/gh/laurelcafe/laurelcafe.github.io/image/Build_a_Blog/theme.png" alt="theme"></p><p>##安装Hexo以及Archer主题</p><p>安装 <code>Hexo</code> 我们可以直接选择在 <a href="https://hexo.io/zh-cn/docs/">Hexo文档</a> 这里安装必要应用程序。</p><p>必要安装程序有 <a href="https://nodejs.org/en/">Node.js</a> 和 <a href="https://git-scm.com/">Git</a> 。<a href="https://nodejs.org/en/">Node.js</a> 安装左侧的或者右侧的都可以，我安装的是左侧的。</p><p>两个应用程序安装完成后，在你的 <a href="https://git-scm.com/">Git</a> 安装的根目录（如：<code>X:\XX\Git</code>)，双击打开文件夹下的 <code>git-bash.exe</code> 或者右键选择 <code>Git Bash Here</code> ，在弹出的窗口里输入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure><p>然后等待完成。</p><p>接下来是安装<a href="https://github.com/fi3ework/hexo-theme-archer">Archer</a>主题。</p><p>找个位置新建一个文件夹，命名为 <code>Blog</code> （或者其他名字），这就是你的 <code>Hexo目录</code> 。在 <code>Hexo目录</code> 下右键 <code>Git Bash Here</code> ，在弹出的窗口里输入（很长，注意拉到后面）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i hexo-generator-json-content --save &amp;&amp; npm i --save hexo-wordcount &amp;&amp; git <span class="built_in">clone</span> https://github.com/fi3ework/hexo-theme-archer.git themes/archer --depth=1</span><br></pre></td></tr></table></figure><p>然后等待完成。</p><p>完成后，找到 <code>Hexo目录</code> 下的 <code>_config.yml</code> 文件，修改里面的 <code>theme</code> 字段为 <code>archer</code> 。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">theme: archer</span><br></pre></td></tr></table></figure><p>然后修改 <code>Hexo目录</code> 下的 <code>_config.yml</code> 中的（ <strong>用户名即为GitHub注册时的用户名</strong> ）</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repository: https://github.com/用户名/用户名.github.io</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><p>然后添加 <code>sidebar</code> 启用支持：在 <code>Hexo目录</code> 下的 <code>_config.yml</code> 中添加以下字段</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">jsonContent:</span><br><span class="line">  meta: true</span><br><span class="line">  pages: false</span><br><span class="line">  posts:</span><br><span class="line"><span class="code">    title: true</span></span><br><span class="line"><span class="code">    date: true</span></span><br><span class="line"><span class="code">    path: true</span></span><br><span class="line"><span class="code">    text: false</span></span><br><span class="line"><span class="code">    raw: false</span></span><br><span class="line"><span class="code">    content: false</span></span><br><span class="line"><span class="code">    slug: false</span></span><br><span class="line"><span class="code">    updated: false</span></span><br><span class="line"><span class="code">    comments: false</span></span><br><span class="line"><span class="code">    link: false</span></span><br><span class="line"><span class="code">    permalink: true</span></span><br><span class="line"><span class="code">    excerpt: false</span></span><br><span class="line"><span class="code">    categories: true</span></span><br><span class="line"><span class="code">    tags: true</span></span><br></pre></td></tr></table></figure><p>剩余可选配置和详细设置建议访问<a href="https://github.com/fi3ework/hexo-theme-archer">Archer</a>主题的 <code>GitHub</code> 页面说明修改。</p><p>*注：如果不想要页面文章下方的版权及其他信息，如图</p><p><img src="https://cdn.jsdelivr.net/gh/laurelcafe/laurelcafe.github.io/image/Build_a_Blog/an.png" alt="an"></p><p>可以在 <code>Hexo目录</code> 下的 <code>theme</code> 文件夹下的 <code>archer</code> 的文件夹下的 <code>_config.yml</code> </p><p>（例： <code>X:\Blog\themes\archer</code> 文件夹下的 <code>_config.yml</code> )，修改为</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">copyright:</span><br><span class="line">  enable: false</span><br></pre></td></tr></table></figure><p>网页个人的相关信息也在同文件（ <code>X:\Blog\themes\archer</code> 文件夹下的 <code>_config.yml</code> ）中修改。</p><p>**注：个人信息中的简介网址不需要加 <code>https:</code><br>（如： <code>github: //github.com/laurelcafe</code> )</p><h2 id="Git绑定GitHub"><a href="#Git绑定GitHub" class="headerlink" title="Git绑定GitHub"></a>Git绑定GitHub</h2><p>我们要用 <code>Git</code> 上传文件到 <code>GitHub</code> 首先得利用 <code>SSH</code> 登录远程主机，而登录方式有两种：一种是口令登录，另一种是公钥登录。</p><p>口令登录每次都要输入密码十分麻烦，而公钥登录就省去了输入密码的步骤，所以我们选择公钥授权。</p><p>首先我们得在 <code>GitHub</code> 上添加 <code>SSH key</code> 配置，要想生成 <code>SSH key</code> ，就要先安装 SSH，不过我们安装了 <code>Git Bash</code> ，其应该自带了 <code>SSH</code> 。检验一下是否安装 <code>SSH</code> ，我们随便新建一个文件夹，然后在文件夹中右键选择 <code>Git Bash Here</code> 。</p><p>然后输入 <code>SSH</code></p><p><img src="https://cdn.jsdelivr.net/gh/laurelcafe/laurelcafe.github.io/image/Build_a_Blog/ssh.png" alt="ssh"></p><p>如图，则已经安装了 <code>SSH</code> 。</p><p>然后输入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa</span><br></pre></td></tr></table></figure><p>表示我们指定 <code>RSA</code> 算法生成密钥，然后敲四次回车键，之后就就会生成两个文件，分别为秘钥 <code>id_rsa</code> 和公钥 <code>id_rsa.pub</code> 。 </p><p>（注意：<code>Git</code> 中的复制粘贴不是 <code>Ctrl+C</code> 和 <code>Ctrl+V</code> ，而是 <code>Ctrl+insert</code> 和 <code>Shift+insert</code> 。）</p><p>文件的位置在运行的窗口上都有显示，默认生成在以下目录：</p><ul><li>Linux 系统：~/.ssh</li><li>Mac 系统：~/.ssh</li><li>Windows 10 ：C:/Users/用户名/.ssh</li></ul><p>接下来我们要把公钥 <code>id_rsa.pub</code> 的内容添加到 <code>GitHub</code> 。复制公钥 <code>id_rsa.pub</code> 文件里的内容，你可以通过目录找到 <code>id_rsa.pub</code> 文件的位置，用记事本打开文件复制。</p><p><img src="https://cdn.jsdelivr.net/gh/laurelcafe/laurelcafe.github.io/image/Build_a_Blog/rsa.png" alt="rsa"></p><p>然后我们打开 <code>GitHub</code> 的主页，然后点击自己的头像，选择 <code>Setting</code> </p><p><img src="https://cdn.jsdelivr.net/gh/laurelcafe/laurelcafe.github.io/image/Build_a_Blog/setting.png" alt="setting"></p><p>然后选择 <code>SSH and GPG keys</code> ，再点击 <code>New SSH key</code></p><p><img src="https://cdn.jsdelivr.net/gh/laurelcafe/laurelcafe.github.io/image/Build_a_Blog/keys.png" alt="keys"></p><p>将复制的公钥 <code>id_rsa.pub</code> 的内容粘贴到 <code>key</code> 内，再点击 <code>Add SSH key</code></p><p>***注：标题填不填都可以</p><p><img src="https://cdn.jsdelivr.net/gh/laurelcafe/laurelcafe.github.io/image/Build_a_Blog/add.png" alt="add"></p><p>这样我们就绑定完成了。接下来测试下有没有绑定成功。</p><p>随意位置右键选择 <code>Git Bash Here</code> ，然后输入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure><p>第一次会出现这种情况，输入 <code>yes</code> 就可以了。</p><p><img src="https://cdn.jsdelivr.net/gh/laurelcafe/laurelcafe.github.io/image/Build_a_Blog/yes.png" alt="yes"></p><p>如果出现下图红框里的文字，则说明绑定成功。</p><p><img src="https://cdn.jsdelivr.net/gh/laurelcafe/laurelcafe.github.io/image/Build_a_Blog/access.png" alt="access"></p><h2 id="提交文件、发表Blog"><a href="#提交文件、发表Blog" class="headerlink" title="提交文件、发表Blog"></a>提交文件、发表Blog</h2><p>经过上面的步骤，我们的准备工作基本上就已经结束了，下面就是提交文件、发表Blog了。</p><p>我们打开 <code>Hexo目录</code> ，右键选择 <code>Git Bash Here</code> ，然后输入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br></pre></td></tr></table></figure><p>生成静态文件，然后输入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure><p>开启本地服务器测试，然后打开浏览器，在地址栏输入 <code>http://localhost:4000/</code> ,查看网页有没有什么问题，没有问题的话，再输入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo d</span><br></pre></td></tr></table></figure><p>上传文件到 <code>GitHub</code> ，等待上传完成。上传完成后，打开浏览器，在地址栏输入 <code>你的用户名+.github.io</code> （如： <code>laurelcafe.github.io</code> ），查看网页。</p><p><code>你的用户名+.github.io</code> 就是你Blog的网址了。</p><h2 id="编写新Blog并发布"><a href="#编写新Blog并发布" class="headerlink" title="编写新Blog并发布"></a>编写新Blog并发布</h2><p>网站我们已经部署好了，那么怎么发表新的Blog呢？</p><p>打开 <code>Hexo目录</code> 下的 <code>source</code> 文件夹下的 <code>_posts</code> （如： <code>X:\Blog\source\_posts</code> )，这个文件夹就是Blog文件存放的文件夹（可以看到一个 <code>hello-world.md</code> 文件），你编写好的Blog文件放在这，再生成静态文件上传到GitHub，就可以在 <code>你的用户名+.github.io</code> 上看到了。</p><p>Blog文件的格式为 <code>.md</code> ，是用<a href="https://zh.wikipedia.org/zh-hans/Markdown">markdown</a>编写的，所以如果要写Blog，首先要会一点<a href="https://zh.wikipedia.org/zh-hans/Markdown">markdown</a>语法。</p><p>这里给一个一般格式。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: Tags</span><br><span class="line">subtitle: GG</span><br><span class="line">date: 2020-8-2 23:08:20</span><br><span class="line">tags:</span><br><span class="line"><span class="bullet">-</span> Foo</span><br><span class="line"><span class="bullet">-</span> Bar</span><br><span class="line"><span class="bullet">-</span> Baz</span><br><span class="line">header<span class="emphasis">_image: /intro/post-bg.jpg</span></span><br><span class="line"><span class="emphasis">---</span></span><br><span class="line"><span class="emphasis">#### Test</span></span><br><span class="line"><span class="emphasis">###### Test</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">[<span class="string">Hexo</span>](<span class="link">https://hexo.io/</span>)</span></span><br></pre></td></tr></table></figure><p>编写完成保存后，我们回到 <code>Hexo目录</code> ，右键选择 <code>Git Bash Here</code> ，然后输入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br></pre></td></tr></table></figure><p>生成静态文件，然后输入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure><p>开启本地服务器测试，然后打开浏览器，在地址栏输入 <code>http://localhost:4000/</code> ,查看网页有没有什么问题，没有问题的话，再输入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo d</span><br></pre></td></tr></table></figure><p>上传文件到 <code>GitHub</code> ，等待上传完成。上传完成后，打开浏览器，在地址栏输入 <code>你的用户名+.github.io</code> （如： <code>laurelcafe.github.io</code> ），查看新更新的Blog。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>总体来说，构建这么一个Blog相当简单，不需要复杂的代码编辑，基本上是可以靠利用其他人现成的文件来搭建的，而且搭建出来也不需要服务器和域名，基本上就是免费搭建个人Blog的最佳办法。</p><p>如果你觉得当前 <code>Hexo主题</code> 并不好看，你也可以去<a href="https://hexo.io/">Hexo</a>官网找自己合适的主题来搭建，不过可能有些搭建步骤就不一样了，需要你自己按照主题作者的使用说明来逐步修改。</p><p>这篇文章其实也是我的实验作，一篇新Blog。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近无事做，正好看了篇别人的Blog，感觉页面精美，所以也生出了自己搭建Blog的想法。&lt;br&gt;于是乎，心动不如行动。&lt;/p&gt;
&lt;h2 id=&quot;使用相关&quot;&gt;&lt;a href=&quot;#使用相关&quot; class=&quot;headerlink&quot; title=&quot;使用相关&quot;&gt;&lt;/a&gt;使用相关&lt;/h
      
    
    </summary>
    
    
    
      <category term="Blog" scheme="http://yoursite.com/tags/Blog/"/>
    
      <category term="Hexo" scheme="http://yoursite.com/tags/Hexo/"/>
    
      <category term="GitHub" scheme="http://yoursite.com/tags/GitHub/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2020/08/02/hello-world/"/>
    <id>http://yoursite.com/2020/08/02/hello-world/</id>
    <published>2020-08-01T19:50:46.219Z</published>
    <updated>2020-08-01T19:50:46.219Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for
      
    
    </summary>
    
    
    
  </entry>
  
</feed>
